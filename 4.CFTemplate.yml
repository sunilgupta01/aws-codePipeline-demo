# https://github.com/s0enke/cloudformation-templates/blob/master/templates/lambda-alb-sam-sample.yaml

Description: ALB as a trigger of Lambda with API gateway
AWSTemplateFormatVersion: 2010-09-09

Resources:

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          var AWS = require('aws-sdk');
          AWS.config.update({region: 'us-east-1'});
          var polly = new AWS.Polly();
          exports.handler = (event,context, callback) => {

              let pollyparams = JSON.parse(event.body);
              console.log('Params passed to synthesizeSpeech: ', pollyparams);
              polly.synthesizeSpeech(pollyparams, function(err, data){
                  if (err) {
                  console.log(err);
                  callback('Error', err);
                  } else if (data) {
                      console.log('Call Successfull');
                      let responseObject = {
                          statusCode: 200,
                          headers: {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin' : '*',
                              'Access-Control-Allow-Headers' : 'Content-Type, Access-Control-Allow-Headers' 
                          },
                          body: JSON.stringify(data)
                      };
                      callback(null, responseObject);
                  }
              });
          };
      FunctionName:
        Ref: LambdaFuncName
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs12.x

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: ['lambda.amazonaws.com']
      Path: /
      Policies:
        - PolicyName: Policy-lambda-alb
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'Polly:*'
                  - 's3:*'
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaENIManagementAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonPollyFullAccess'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'

  APIGatewayRestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      EndpointConfiguration:
        Types:
          - !Ref apiGatewayType
        VpcEndpointIds:
          - !Ref vpcEndpointId
      Name: !Ref apiGatewayName
      Policy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: execute-api:Invoke
            Resource: "*"

  APIGatewayMockMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !GetAtt 
        - APIGatewayRestAPI
        - RootResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations

  APIGatewayOptionsMethod: 
    Type: AWS::ApiGateway::Method 
    Properties:
      AuthorizationType: NONE 
      RestApiId: !Ref APIGatewayRestAPI 
      ResourceId: !GetAtt 
        - APIGatewayRestAPI
        - RootResourceId
      HttpMethod: OPTIONS 
      Integration:
        IntegrationResponses: 
        - StatusCode: 200 
          ResponseParameters: 
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'" 
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'" 
            method.response.header.Access-Control-Allow-Origin: "'*'" 
          ResponseTemplates: 
            application/json: '' 
        PassthroughBehavior: WHEN_NO_MATCH 
        RequestTemplates: 
          application/json: '{"statusCode": 200}' 
        Type: MOCK 
      MethodResponses: 
      - StatusCode: 200 
        ResponseModels: 
          application/json: 'Empty' 
        ResponseParameters: 
          method.response.header.Access-Control-Allow-Headers: false 
          method.response.header.Access-Control-Allow-Methods: false 
          method.response.header.Access-Control-Allow-Origin: false

  LambdaAPIGatewayPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt Lambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join [":", ["arn:aws:execute-api", !Ref "AWS::Region", !Ref "AWS::AccountId", !Join ["", [ !Ref APIGatewayRestAPI, "/*/POST/"]]]]

  APIGatewayProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      RestApiId: !Ref APIGatewayRestAPI
      DeploymentId: !Ref APIGatewayProdDeployment
  
  APIGatewayProdDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
    DependsOn: APIGatewayMockMethod

  LambdaLoadBalancerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com
  
  LoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load balance allow port 80 traffic
      VpcId: vpc-b5b26ede
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: TCP
        ToPort: 80

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:
        Ref: ALBName
      SecurityGroups:
        - !Ref LoadBalancerSecGroup
      Subnets:
        - subnet-7ad91d11
        - subnet-83e1d3f9
        - subnet-1030aa5c

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      Port: 80

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: lambda
      Targets:
        - AvailabilityZone: all
          Id: !GetAtt Lambda.Arn

Outputs:
  LoadBalancerDNSName:
    Value: !GetAtt LoadBalancer.DNSName

Parameters:
  LambdaFuncName:
    Type: String
    Default: Lambda-using-cf
  ALBName:
    Type: String
    Default: Lambda-alb-using-cf
  apiGatewayName:
    Type: String
    Default: api-gw-using-cf
  apiGatewayType:
    Type: String
    Default: "PRIVATE"
  vpcEndpointId:
    Type: String
    Default: "vpce-0662a95f27aa8722d"
  EnvironmentName:
    Type: String
    Default: Prod
