# https://github.com/s0enke/cloudformation-templates/blob/master/templates/lambda-alb-sam-sample.yaml

Description: ALB as a trigger of Lambda
AWSTemplateFormatVersion: 2010-09-09

Resources:

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          var AWS = require('aws-sdk');
          AWS.config.update({region: 'us-east-1'});
          var polly = new AWS.Polly();
          exports.handler = (event,context, callback) => {

              let pollyparams = JSON.parse(event.body);
              console.log('Params passed to synthesizeSpeech: ', pollyparams);
              polly.synthesizeSpeech(pollyparams, function(err, data){
                  if (err) {
                  console.log(err);
                  callback('Error', err);
                  } else if (data) {
                      console.log('Call Successfull');
                      let responseObject = {
                          statusCode: 200,
                          headers: {
                              'Content-Type': 'application/json',
                              'Access-Control-Allow-Origin' : '*',
                              'Access-Control-Allow-Headers' : 'Content-Type, Access-Control-Allow-Headers' 
                          },
                          body: JSON.stringify(data)
                      };
                      callback(null, responseObject);
                  }
              });
          };
      FunctionName:
        Ref: LambdaFuncName
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: nodejs12.x

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: ['lambda.amazonaws.com']
      Path: /
      Policies:
        - PolicyName: Policy-lambda-alb
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'Polly:*'
                  - 's3:*'
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: '*'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com
  
  LoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load balance allow port 80 traffic
      VpcId: vpc-a20c99c9
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 80
        IpProtocol: TCP
        ToPort: 80

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name:
        Ref: ALBName
      SecurityGroups:
        - !Ref LoadBalancerSecGroup
      Subnets:
        - subnet-0881d344
        - subnet-250ab74e
        - subnet-6b9e7416

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Protocol: HTTP
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      Port: 80

  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: lambda
      Targets:
        - AvailabilityZone: all
          Id: !GetAtt Lambda.Arn

Outputs:
  LoadBalancerDNSName:
    Value: !GetAtt LoadBalancer.DNSName

Parameters:
  LambdaFuncName:
    Type: String
    Default: Lambda-using-cf
  ALBName:
    Type: String
    Default: Lambda-alb-using-cf
  EnvironmentName:
    Type: String
    Default: Prod