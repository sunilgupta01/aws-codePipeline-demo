AWSTemplateFormatVersion: 2010-09-09
Parameters:
  AppId :
    Type: Number
    Description: Appliccation ID number
  apiName:
    Type: String
  type:
    Type: String
  vpcEndpointId:
    Type: String
  lambdaFunctionName:
    Type: String
    Default: lambda-using-cf
Resources:
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: !Sub "DO NOT DELETE - Used by Lambda. Created by CloudFormation ${AWS::StackId}"
      ManagedPolicyArns:
        - !Sub "arn::${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: LambdaCFPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "Polly:*"
                  - "s3:*"
                  - 'logs:CreateLogStream'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                Resource: "*"
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Ref lambdaFunctionName
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            // TODO implement
            const response = {
                statusCode: 200,
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify('Hello from Lambda!'),
            };
            return response;
          };
      Description: "Created a folder in s3 bucket for AWS transfer user"
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt LambdaRole.Arn
      MemorySize: 128
      Timeout: 120
  APIGatewayRestAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      EndpointConfiguration:
        Types:
          - !Ref type
        VpcEndpointIds:
          - !Ref vpcEndpointId
      Name: !Ref apiName
      Policy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: execute-api:Invoke
            Resource: "*"
  APIGatewayMockMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
      ResourceId: !GetAtt APIGatewayRestAPI.RootResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
      Integration:
        Type: AWS_PROXY
        IntegrationResponses:
          - StatusCode: 200
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations
  LambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt lambdaFunctionName
      Principal: apigateway.amazonaws.com
      SourceArn: !Join [":", ["arn:aws:execute-api", !Ref AWS::Region, !Ref AWS::AccountId, !Join [":", [ !Ref APIGatewayRestAPI, "/*/POST/"]]]]
    DependsOn: [LambdaFunction, ProdStage, APIGatewayMockMethod, APIGatewayRestAPI]
  ProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      RestApiId: !Ref APIGatewayRestAPI
      DeploymentId: !Ref APIGatewayProdDeployment
    DependsOn: APIGatewayProdDeployment
  APIGatewayProdDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref APIGatewayRestAPI
    DependsOn: APIGatewayMockMethod
